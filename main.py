from fastapi import FastAPI, HTTPException
from datetime import datetime
import httpx
import asyncio

app = FastAPI()

OSV_API_URL = "https://api.osv.dev/v1/query"


async def fetch_vulnerable_versions(package_name: str, ecosystem: str):
    query = {
        "package": {
            "name": package_name,
            "ecosystem": ecosystem
        }
    }
    async with httpx.AsyncClient() as client:
        response = await client.post(OSV_API_URL, json=query)
        response.raise_for_status()
        return response.json()


@app.get("/versions")
async def get_versions(name: str):
    try:
        debian_task = fetch_vulnerable_versions(name, "Debian")
        ubuntu_task = fetch_vulnerable_versions(name, "Ubuntu")

        debian_response, ubuntu_response = await asyncio.gather(debian_task, ubuntu_task)

        versions = set()

        for response in (debian_response, ubuntu_response):
            for entry in response.get("vulns", []):
                for affected in entry.get("affected", []):
                    versions.update(affected.get("versions", []))

        versions = sorted(versions)

        return {
            "name": name,
            "versions": versions,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        }
    except httpx.HTTPStatusError as e:
        raise HTTPException(status_code=e.response.status_code, detail=e.response.json())
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    import uvicorn

    uvicorn.run(app, host="127.0.0.1", port=80)
